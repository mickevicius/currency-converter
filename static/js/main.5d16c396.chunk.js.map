{"version":3,"sources":["meta/currencies.js","components/Option.js","components/CurrencyBox.js","components/App.js","serviceWorker.js","index.js"],"names":["currencies","id","code","locale","display","Option","props","value","item","CurrencyBox","rate","state","rate_float","convertedAmount","amount","className","placeholder","toLocaleString","style","currency","readOnly","onClick","handleClick","App","fetchData","fetch","then","response","json","data","setState","USD","bpi","EUR","GBP","updated","time","options","bind","handleChange","handleSelect","this","setInterval","event","target","changeDisplayState","parseInt","prevState","map","displayOptions","key","displayBoxes","margin","onChange","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d16c396.chunk.js","sourcesContent":["const currencies = [\n    {\n        id: 1,\n        code: \"Select\",\n        locale: \"en-US\",\n        display: false\n    },\n    {\n        id: 2,\n        code: \"USD\",\n        locale: \"en-US\",\n        display: false\n    },\n    {\n        id:3,\n        code: \"GBP\",\n        locale: \"en-UK\",\n        display: false\n    },\n    {\n        id: 4,\n        code: \"EUR\",\n        locale: \"lt-LT\",\n        display: true\n    }\n];\n\nexport default currencies","import React from \"react\";\n\nfunction Option(props) {\n    return (\n        <option value={props.item.id} >{props.item.code}</option>\n    )\n}\n\nexport default Option","import React from \"react\";\nimport '../css/currencyBox.css'\n\n\nfunction CurrencyBox(props) {\n    const locale = props.item.locale;\n    const rate = props.state[props.item.code].rate_float;\n\n    const convertedAmount = props.state.amount * rate;\n\n    return (\n        <div className=\"currency-box\">\n            <input placeholder={props.item.code}\n                   value={props.state.amount !== \"\"\n                       ? convertedAmount.toLocaleString(locale, {style: 'currency', currency: props.item.code})\n                       : \"\"}\n                   readOnly\n            />\n            <div className=\"x-sign\" onClick={() => {props.handleClick(props.item.id)}}>X</div>\n        </div>\n    );\n}\n\nexport default CurrencyBox","import React from 'react';\nimport currencies from \"../meta/currencies\";\nimport Option from \"./Option\";\nimport CurrencyBox from \"./CurrencyBox\";\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            options: currencies,\n            amount: \"\",\n            USD: {},\n            EUR: {},\n            GBP: {},\n            updated: \"\"\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchData();\n        setInterval(() => this.fetchData(), 60000);\n    }\n\n    fetchData = () => {\n        fetch(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    USD: data.bpi.USD,\n                    EUR: data.bpi.EUR,\n                    GBP: data.bpi.GBP,\n                    updated: data.time.updated\n                });\n            });\n    };\n\n    handleChange(event) {\n        this.setState({amount: event.target.value});\n    }\n\n    handleClick(id) {\n        this.changeDisplayState(id);\n    }\n\n    handleSelect(event) {\n        const id = parseInt(event.target.value);\n        this.changeDisplayState(id);\n    }\n\n    changeDisplayState(id) {\n        this.setState(prevState => {\n            const updatedView = prevState.options.map(item => {\n                if (item.id === id) {\n                    item.display = !item.display;\n                }\n                return item;\n            });\n            return {options: updatedView};\n        });\n    }\n\n\n    render() {\n        const displayOptions = this.state.options\n            .map(item => item.display ? null :\n                <Option\n                    key={item.id}\n                    item={item}\n                    handleClick={this.handleClick}\n                />\n            );\n\n        const displayBoxes = this.state.options.map(item => item.display ?\n            <CurrencyBox\n                key={item.id}\n                item={item}\n                state={this.state}\n                handleClick={this.handleClick}\n            /> : null);\n\n        return (\n            <div className=\"converter-form\">\n                <select style={{margin: \"1.5em 0 2em 30px\"}} onChange={this.handleSelect}>{displayOptions}</select>\n                <div className=\"input-bct\">\n                    <input type=\"number\" onChange={this.handleChange} placeholder=\"Enter BTC\"/>\n                    <label>BTC</label>\n                </div>\n                {displayBoxes}\n                <span>Updated: {this.state.updated}</span>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}